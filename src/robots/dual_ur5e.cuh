namespace ppln::collision {





#define DUAL_UR5E_APPROX_SPHERE_COUNT 150
#define DUAL_UR5E_APPROX_JOINT_COUNT 25
#define DUAL_UR5E_APPROX_SELF_CC_RANGE_COUNT 95
#define FIXED -1
#define X_PRISM 0
#define Y_PRISM 1
#define Z_PRISM 2
#define X_ROT 3
#define Y_ROT 4
#define Z_ROT 5
#define BATCH_SIZE 32

__device__ __constant__ float4 dual_ur5e_approx_spheres_array[150] = {
    { -0.550003f, 1e-06f, 0.049546f, 0.090364f },
    { -3e-06f, -0.006649f, -0.001514f, 0.089842f },
    { -0.298805f, -2.2e-05f, 0.130656f, 0.094923f },
    { -0.422387f, -2.9e-05f, 0.129005f, 0.091263f },
    { -0.008711f, 6e-06f, 0.135378f, 0.090758f },
    { -0.370304f, -2.5e-05f, 0.131606f, 0.093838f },
    { -0.087952f, -3e-06f, 0.13542f, 0.092897f },
    { -0.221208f, -1.6e-05f, 0.132928f, 0.093117f },
    { -0.158663f, -1.2e-05f, 0.131799f, 0.089958f },
    { -0.375346f, -0.000304f, -0.011401f, 0.069786f },
    { -0.37299f, 0.000759f, 0.022953f, 0.073418f },
    { -0.295291f, -0.000411f, 0.009998f, 0.081417f },
    { -0.214257f, 0.000433f, 0.014403f, 0.085647f },
    { -0.123633f, 0.000247f, 0.012469f, 0.087811f },
    { -0.0451f, 0.001873f, 0.014119f, 0.086674f },
    { 0.00852f, 0.010306f, 0.027016f, 0.066154f },
    { 0.007854f, -0.011543f, 0.026729f, 0.070424f },
    { -0.000269f, -0.002284f, -0.013745f, 0.076148f },
    { -0.000228f, 0.000455f, -0.001258f, 0.069339f },
    { -0.000229f, -0.00018f, -0.022867f, 0.044717f },
    { -1e-06f, -1e-06f, 0.039762f, 0.053503f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f },
    { 0.550003f, -1e-06f, 0.049546f, 0.090364f },
    { -3e-06f, -0.006649f, -0.001514f, 0.089842f },
    { -0.298805f, -2.2e-05f, 0.130656f, 0.094923f },
    { -0.422387f, -2.9e-05f, 0.129005f, 0.091263f },
    { -0.008711f, 6e-06f, 0.135378f, 0.090758f },
    { -0.370304f, -2.5e-05f, 0.131606f, 0.093838f },
    { -0.087952f, -3e-06f, 0.13542f, 0.092897f },
    { -0.221208f, -1.6e-05f, 0.132928f, 0.093117f },
    { -0.158663f, -1.2e-05f, 0.131799f, 0.089958f },
    { -0.375346f, -0.000304f, -0.011401f, 0.069786f },
    { -0.37299f, 0.000759f, 0.022953f, 0.073418f },
    { -0.295291f, -0.000411f, 0.009998f, 0.081417f },
    { -0.214257f, 0.000433f, 0.014403f, 0.085647f },
    { -0.123633f, 0.000247f, 0.012469f, 0.087811f },
    { -0.0451f, 0.001873f, 0.014119f, 0.086674f },
    { 0.00852f, 0.010306f, 0.027016f, 0.066154f },
    { 0.007854f, -0.011543f, 0.026729f, 0.070424f },
    { -0.000269f, -0.002284f, -0.013745f, 0.076148f },
    { -0.000228f, 0.000455f, -0.001258f, 0.069339f },
    { -0.000229f, -0.00018f, -0.022867f, 0.044717f },
    { -1e-06f, -1e-06f, 0.039762f, 0.053503f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f }
};

__device__ __constant__ float dual_ur5e_approx_fixed_transforms[] = {
    // joint 0
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 1
    -1.0, -0.0, 0.0, -0.55,
    0.0, -1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1625,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 2
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, 0.0,
    0.0, 1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 3
    1.0, 0.0, 0.0, -0.425,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 4
    1.0, 0.0, 0.0, -0.3922,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1333,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 5
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, -0.0997,
    0.0, 1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 6
    1.0, -0.0, 0.0, 0.0,
    -0.0, -0.0, 1.0, 0.0996,
    -0.0, -1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 7
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.030601,
    -0.0, -0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 8
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 9
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.0127,
    -0.0, -0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 10
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.0127,
    0.0, 0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 11
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.030601,
    0.0, 0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 12
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 13
    1.0, 0.0, 0.0, 0.55,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1625,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 14
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, 0.0,
    0.0, 1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 15
    1.0, 0.0, 0.0, -0.425,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 16
    1.0, 0.0, 0.0, -0.3922,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1333,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 17
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, -0.0997,
    0.0, 1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 18
    1.0, -0.0, 0.0, 0.0,
    -0.0, -0.0, 1.0, 0.0996,
    -0.0, -1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 19
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.030601,
    -0.0, -0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 20
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 21
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.0127,
    -0.0, -0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 22
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.0127,
    0.0, 0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 23
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.030601,
    0.0, 0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 24
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    
};

__device__ __constant__ int dual_ur5e_approx_sphere_to_joint[150] = {
    0,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    5,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    0,
    13,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    16,
    17,
    18,
    18,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    21,
    21,
    22,
    22,
    22,
    22,
    22,
    22,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24
};

__device__ __constant__ int dual_ur5e_approx_flattened_joint_to_spheres[175] = {
    0,
    75,
    -1,
    1,
    -1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    -1,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    -1,
    17,
    -1,
    18,
    -1,
    19,
    20,
    -1,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    -1,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    -1,
    42,
    43,
    44,
    45,
    46,
    47,
    -1,
    48,
    49,
    50,
    51,
    52,
    53,
    -1,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    -1,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    -1,
    76,
    -1,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    -1,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    -1,
    92,
    -1,
    93,
    -1,
    94,
    95,
    -1,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    -1,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    -1,
    117,
    118,
    119,
    120,
    121,
    122,
    -1,
    123,
    124,
    125,
    126,
    127,
    128,
    -1,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    -1,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    -1
};

__device__ __constant__ int dual_ur5e_approx_joint_types[] = {
    3,
    5,
    5,
    5,
    5,
    5,
    5,
    3,
    3,
    3,
    3,
    3,
    3,
    5,
    5,
    5,
    5,
    5,
    5,
    3,
    3,
    3,
    3,
    3,
    3
};

__device__ __constant__ int dual_ur5e_approx_self_cc_ranges[95][3] = {
    { 0, 1, 74 },
    { 0, 76, 149 },
    { 1, 9, 149 },
    { 2, 17, 149 },
    { 3, 17, 149 },
    { 4, 17, 149 },
    { 5, 17, 149 },
    { 6, 17, 149 },
    { 7, 17, 149 },
    { 8, 17, 149 },
    { 9, 20, 149 },
    { 10, 20, 149 },
    { 11, 20, 149 },
    { 12, 20, 149 },
    { 13, 20, 149 },
    { 14, 20, 149 },
    { 15, 20, 149 },
    { 16, 20, 149 },
    { 17, 21, 149 },
    { 18, 21, 149 },
    { 19, 21, 149 },
    { 20, 75, 149 },
    { 21, 75, 149 },
    { 22, 75, 149 },
    { 23, 75, 149 },
    { 24, 75, 149 },
    { 25, 75, 149 },
    { 26, 75, 149 },
    { 27, 75, 149 },
    { 28, 75, 149 },
    { 29, 75, 149 },
    { 30, 75, 149 },
    { 31, 75, 149 },
    { 32, 75, 149 },
    { 33, 75, 149 },
    { 34, 75, 149 },
    { 35, 75, 149 },
    { 36, 75, 149 },
    { 37, 75, 149 },
    { 38, 75, 149 },
    { 39, 75, 149 },
    { 40, 75, 149 },
    { 41, 75, 149 },
    { 42, 75, 149 },
    { 43, 75, 149 },
    { 44, 75, 149 },
    { 45, 75, 149 },
    { 46, 75, 149 },
    { 47, 75, 149 },
    { 48, 75, 149 },
    { 49, 75, 149 },
    { 50, 75, 149 },
    { 51, 75, 149 },
    { 52, 75, 149 },
    { 53, 75, 149 },
    { 54, 75, 149 },
    { 55, 75, 149 },
    { 56, 75, 149 },
    { 57, 75, 149 },
    { 58, 75, 149 },
    { 59, 75, 149 },
    { 60, 75, 149 },
    { 61, 75, 149 },
    { 62, 75, 149 },
    { 63, 75, 149 },
    { 64, 75, 149 },
    { 65, 75, 149 },
    { 66, 75, 149 },
    { 67, 75, 149 },
    { 68, 75, 149 },
    { 69, 75, 149 },
    { 70, 75, 149 },
    { 71, 75, 149 },
    { 72, 75, 149 },
    { 73, 75, 149 },
    { 74, 75, 149 },
    { 75, 76, 149 },
    { 76, 84, 149 },
    { 77, 92, 149 },
    { 78, 92, 149 },
    { 79, 92, 149 },
    { 80, 92, 149 },
    { 81, 92, 149 },
    { 82, 92, 149 },
    { 83, 92, 149 },
    { 84, 95, 149 },
    { 85, 95, 149 },
    { 86, 95, 149 },
    { 87, 95, 149 },
    { 88, 95, 149 },
    { 89, 95, 149 },
    { 90, 95, 149 },
    { 91, 95, 149 },
    { 92, 96, 149 },
    { 93, 96, 149 }
};

__device__ __constant__ int dual_ur5e_approx_joint_parents[25] = {
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    6,
    6,
    6,
    11,
    0,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    18,
    18,
    18,
    23
};

__device__ __constant__ int dual_ur5e_approx_T_memory_idx[25] = {
    0,
    3,
    3,
    3,
    3,
    3,
    1,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    3,
    3,
    3,
    3,
    3,
    3
};

__device__ __constant__ int dual_ur5e_approx_dfs_order[25] = {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24
};

template <>
__device__ void fk_approx<ppln::robots::Dual_UR5e>(
    const float* q,
    volatile float* sphere_pos_approx, // 150 spheres x 32 robots x 3 coordinates (each column is a robot)
    float *T, // 32 robots x 4 x 4x4 transform matrix , column major
    const int tid
)
{
    // every 4 threads are responsible for one column of the transform matrix T
    // make_transform will calculate the necessary column of T_step needed for the thread
    const int col_ind = tid % 4;
    const int batch_ind = tid / 4;

    int T_offset = batch_ind * 5 * 16;
    float T_step_col[4]; // 4x1 column of the joint transform matrix for this thread
    float *T_base = T + T_offset; // 4x4 transform matrix for the batch
    
    #pragma unroll
    for (int i = 0; i < 5; ++i) {
        float *T_col_i = T + i * 16 + col_ind * 4;
        for (int r=0; r<4; r++) {
            T_col_i[r] = 0.0f;
        }
        T_col_i[col_ind] = 1.0f;
    }

    int joint_to_sphere_ind = 0;

    // loop through each joint, accumulate transformation matrix, and update sphere positions
    for (int j = 0; j < DUAL_UR5E_APPROX_JOINT_COUNT; ++j) {
        int i = dual_ur5e_approx_dfs_order[j];
        float T_col_tmp[4];
        int parent_idx = dual_ur5e_approx_joint_parents[i];
        int T_memory_idx_parent = dual_ur5e_approx_T_memory_idx[parent_idx];
        int T_memory_idx = dual_ur5e_approx_T_memory_idx[i];
        if (i > 0) {
            int ft_addr_start = i * 16;
            int joint_type = dual_ur5e_approx_joint_types[i];

            if (joint_type <= Z_PRISM) {
                prism_fn(&dual_ur5e_approx_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col, joint_type);
            }
            else if (joint_type == X_ROT) {
                xrot_fn(&dual_ur5e_approx_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col);
            }
            else if (joint_type == Y_ROT) {
                yrot_fn(&dual_ur5e_approx_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col);
            }
            else if (joint_type == Z_ROT) {
                zrot_fn(&dual_ur5e_approx_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col);
            }
            
            for (int r=0; r<4; r++){
                T_col_tmp[r] = dot4_col(&T_base[T_memory_idx_parent*16 + r], T_step_col);
            }
            for (int r=0; r<4; r++){
                T_base[T_memory_idx*16 + col_ind*4 + r] = T_col_tmp[r];
            }
        }
        __syncwarp();
        while (dual_ur5e_approx_flattened_joint_to_spheres[joint_to_sphere_ind] != -1) {
            int sphere_ind = dual_ur5e_approx_flattened_joint_to_spheres[joint_to_sphere_ind];
            if (col_ind < 3) {
                // sphere sphere_ind, robot batch_ind (BATCH_SIZE robots), coord col_ind
                sphere_pos_approx[sphere_ind * BATCH_SIZE * 3 + batch_ind * 3 + col_ind] = 
                    T_base[col_ind] * dual_ur5e_approx_spheres_array[sphere_ind].x +
                    T_base[col_ind + M] * dual_ur5e_approx_spheres_array[sphere_ind].y +
                    T_base[col_ind + M*2] * dual_ur5e_approx_spheres_array[sphere_ind].z +
                    T_base[col_ind + M*3];
            }
            joint_to_sphere_ind++;
        }
        joint_to_sphere_ind++;
    }
}

// 4 threads per discretized motion for self-collision check
template <>
__device__ bool self_collision_check_approx<ppln::robots::Dual_UR5e>(volatile float* sphere_pos_approx, volatile int* joint_in_collision, const int tid){
    const int thread_ind = tid % 4;
    const int batch_ind = tid / 4;

    for (int i = thread_ind; i < DUAL_UR5E_APPROX_SELF_CC_RANGE_COUNT; i+=4) {
        int sphere_1_ind = dual_ur5e_approx_self_cc_ranges[i][0];
        float sphere_1[3] = {
            sphere_pos_approx[sphere_1_ind * BATCH_SIZE * 3 + batch_ind * 3 + 0],
            sphere_pos_approx[sphere_1_ind * BATCH_SIZE * 3 + batch_ind * 3 + 1],
            sphere_pos_approx[sphere_1_ind * BATCH_SIZE * 3 + batch_ind * 3 + 2]
        };
        for (int j = dual_ur5e_approx_self_cc_ranges[i][1]; j <= dual_ur5e_approx_self_cc_ranges[i][2]; j++) {
            float sphere_2[3] = {
                sphere_pos_approx[j * BATCH_SIZE * 3 + batch_ind * 3 + 0],
                sphere_pos_approx[j * BATCH_SIZE * 3 + batch_ind * 3 + 1],
                sphere_pos_approx[j * BATCH_SIZE * 3 + batch_ind * 3 + 2]
            };
            if (sphere_sphere_self_collision(
                sphere_1[0], sphere_1[1], sphere_1[2], dual_ur5e_approx_spheres_array[sphere_1_ind].w,
                sphere_2[0], sphere_2[1], sphere_2[2], dual_ur5e_approx_spheres_array[j].w
            )){
                atomicAdd((int*)&joint_in_collision[20*batch_ind + dual_ur5e_approx_sphere_to_joint[sphere_1_ind]], 1);
                return false;
            }
        } 
    }
    return true;
}

// 4 threads per discretized motion for env collision check
template <>
__device__ bool env_collision_check_approx<ppln::robots::Dual_UR5e>(volatile float* sphere_pos_approx, volatile int* joint_in_collision, ppln::collision::Environment<float> *env, const int tid){
    const int thread_ind = tid % 4;
    const int batch_ind = tid / 4;
    bool out = true;
    
    #pragma unroll
    for (int i=DUAL_UR5E_APPROX_SPHERE_COUNT/4*thread_ind; i<DUAL_UR5E_APPROX_SPHERE_COUNT/4*(thread_ind+1); i++){
        // sphere i, robot batch_ind (32 robots)
        if (sphere_environment_in_collision(
            env,
            sphere_pos_approx[i * BATCH_SIZE * 3 + batch_ind * 3 + 0],
            sphere_pos_approx[i * BATCH_SIZE * 3 + batch_ind * 3 + 1],
            sphere_pos_approx[i * BATCH_SIZE * 3 + batch_ind * 3 + 2],
            dual_ur5e_approx_spheres_array[i].w
        )) {
            atomicAdd((int*)&joint_in_collision[20*batch_ind + dual_ur5e_approx_sphere_to_joint[i]],1);
            out=false;
        } 
    }

    int i = DUAL_UR5E_APPROX_SPHERE_COUNT-1-thread_ind;
    if (sphere_environment_in_collision(
        env,
        sphere_pos_approx[i * BATCH_SIZE * 3 + batch_ind * 3 + 0],
        sphere_pos_approx[i * BATCH_SIZE * 3 + batch_ind * 3 + 1],
        sphere_pos_approx[i * BATCH_SIZE * 3 + batch_ind * 3 + 2],
        dual_ur5e_approx_spheres_array[i].w
    )) {
        atomicAdd((int*)&joint_in_collision[20*batch_ind + dual_ur5e_approx_sphere_to_joint[i]],1);
        out=false;
    }
    return out;
}




#define DUAL_UR5E_SPHERE_COUNT 150
#define DUAL_UR5E_JOINT_COUNT 25
#define DUAL_UR5E_SELF_CC_RANGE_COUNT 95
#define FIXED -1
#define X_PRISM 0
#define Y_PRISM 1
#define Z_PRISM 2
#define X_ROT 3
#define Y_ROT 4
#define Z_ROT 5
#define BATCH_SIZE 32

__device__ __constant__ float4 dual_ur5e_spheres_array[150] = {
    { -0.550003f, 1e-06f, 0.049546f, 0.090364f },
    { -3e-06f, -0.006649f, -0.001514f, 0.089842f },
    { -0.298805f, -2.2e-05f, 0.130656f, 0.094923f },
    { -0.422387f, -2.9e-05f, 0.129005f, 0.091263f },
    { -0.008711f, 6e-06f, 0.135378f, 0.090758f },
    { -0.370304f, -2.5e-05f, 0.131606f, 0.093838f },
    { -0.087952f, -3e-06f, 0.13542f, 0.092897f },
    { -0.221208f, -1.6e-05f, 0.132928f, 0.093117f },
    { -0.158663f, -1.2e-05f, 0.131799f, 0.089958f },
    { -0.375346f, -0.000304f, -0.011401f, 0.069786f },
    { -0.37299f, 0.000759f, 0.022953f, 0.073418f },
    { -0.295291f, -0.000411f, 0.009998f, 0.081417f },
    { -0.214257f, 0.000433f, 0.014403f, 0.085647f },
    { -0.123633f, 0.000247f, 0.012469f, 0.087811f },
    { -0.0451f, 0.001873f, 0.014119f, 0.086674f },
    { 0.00852f, 0.010306f, 0.027016f, 0.066154f },
    { 0.007854f, -0.011543f, 0.026729f, 0.070424f },
    { -0.000269f, -0.002284f, -0.013745f, 0.076148f },
    { -0.000228f, 0.000455f, -0.001258f, 0.069339f },
    { -0.000229f, -0.00018f, -0.022867f, 0.044717f },
    { -1e-06f, -1e-06f, 0.039762f, 0.053503f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f },
    { 0.550003f, -1e-06f, 0.049546f, 0.090364f },
    { -3e-06f, -0.006649f, -0.001514f, 0.089842f },
    { -0.298805f, -2.2e-05f, 0.130656f, 0.094923f },
    { -0.422387f, -2.9e-05f, 0.129005f, 0.091263f },
    { -0.008711f, 6e-06f, 0.135378f, 0.090758f },
    { -0.370304f, -2.5e-05f, 0.131606f, 0.093838f },
    { -0.087952f, -3e-06f, 0.13542f, 0.092897f },
    { -0.221208f, -1.6e-05f, 0.132928f, 0.093117f },
    { -0.158663f, -1.2e-05f, 0.131799f, 0.089958f },
    { -0.375346f, -0.000304f, -0.011401f, 0.069786f },
    { -0.37299f, 0.000759f, 0.022953f, 0.073418f },
    { -0.295291f, -0.000411f, 0.009998f, 0.081417f },
    { -0.214257f, 0.000433f, 0.014403f, 0.085647f },
    { -0.123633f, 0.000247f, 0.012469f, 0.087811f },
    { -0.0451f, 0.001873f, 0.014119f, 0.086674f },
    { 0.00852f, 0.010306f, 0.027016f, 0.066154f },
    { 0.007854f, -0.011543f, 0.026729f, 0.070424f },
    { -0.000269f, -0.002284f, -0.013745f, 0.076148f },
    { -0.000228f, 0.000455f, -0.001258f, 0.069339f },
    { -0.000229f, -0.00018f, -0.022867f, 0.044717f },
    { -1e-06f, -1e-06f, 0.039762f, 0.053503f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.010146f, 0.003595f, 0.004209f, 0.01486f },
    { -0.009674f, 0.002598f, 0.003042f, 0.014049f },
    { -0.008911f, 0.015703f, 0.018386f, 0.015606f },
    { 0.011381f, 0.018905f, 0.022138f, 0.015752f },
    { -0.009018f, 0.031438f, 0.036811f, 0.015341f },
    { 0.005911f, 0.034291f, 0.040151f, 0.01437f },
    { 0.0f, 0.002297f, 0.00037f, 0.011261f },
    { 0.0f, 0.016608f, 0.001499f, 0.013955f },
    { 0.0f, 0.02677f, 0.001792f, 0.014264f },
    { -0.005135f, 0.037031f, 0.038529f, 0.013081f },
    { 0.007378f, 0.036611f, 0.035295f, 0.014548f },
    { -0.006824f, 0.034062f, 0.015644f, 0.01525f },
    { 0.007378f, 0.033298f, 0.009752f, 0.014756f },
    { -0.000242f, 0.031678f, -0.00279f, 0.014265f },
    { 9e-06f, -0.003017f, 0.001378f, 0.01218f },
    { 8e-06f, -0.012436f, 0.006195f, 0.01124f },
    { 0.00049f, -0.015311f, 0.016237f, 0.010284f },
    { 8e-06f, -0.016391f, 0.008709f, 0.011778f },
    { -0.000153f, -0.015361f, 0.027253f, 0.009281f },
    { 0.003606f, -0.015462f, 0.038306f, 0.008271f },
    { -0.003611f, -0.015462f, 0.038357f, 0.008221f },
    { 0.0f, -0.019021f, 0.01117f, 0.015281f },
    { -9.7e-05f, -0.01902f, 0.022699f, 0.01477f },
    { -2.9e-05f, -0.01902f, 0.036841f, 0.015009f },
    { 0.000124f, -0.01902f, 0.051277f, 0.015176f },
    { 0.004069f, -0.019021f, 0.066739f, 0.012342f },
    { -0.003501f, -0.01902f, 0.06465f, 0.013923f }
};

__device__ __constant__ float dual_ur5e_fixed_transforms[] = {
    // joint 0
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 1
    -1.0, -0.0, 0.0, -0.55,
    0.0, -1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1625,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 2
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, 0.0,
    0.0, 1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 3
    1.0, 0.0, 0.0, -0.425,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 4
    1.0, 0.0, 0.0, -0.3922,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1333,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 5
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, -0.0997,
    0.0, 1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 6
    1.0, -0.0, 0.0, 0.0,
    -0.0, -0.0, 1.0, 0.0996,
    -0.0, -1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 7
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.030601,
    -0.0, -0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 8
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 9
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.0127,
    -0.0, -0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 10
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.0127,
    0.0, 0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 11
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.030601,
    0.0, 0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 12
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 13
    1.0, 0.0, 0.0, 0.55,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1625,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 14
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, 0.0,
    0.0, 1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 15
    1.0, 0.0, 0.0, -0.425,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 16
    1.0, 0.0, 0.0, -0.3922,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.1333,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 17
    1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -1.0, -0.0997,
    0.0, 1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 18
    1.0, -0.0, 0.0, 0.0,
    -0.0, -0.0, 1.0, 0.0996,
    -0.0, -1.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 19
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.030601,
    -0.0, -0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 20
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 21
    -1.0, 0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, -0.0127,
    -0.0, -0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 22
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.0127,
    0.0, 0.0, 1.0, 0.06142,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 23
    1.0, -0.0, -0.0, -0.0,
    0.0, 1.0, 0.0, 0.030601,
    0.0, 0.0, 1.0, 0.054904,
    0.0, 0.0, 0.0, 1.0,
    
    // joint 24
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0376,
    0.0, 0.0, 1.0, 0.043,
    0.0, 0.0, 0.0, 1.0,
    
    
};

__device__ __constant__ int dual_ur5e_sphere_to_joint[150] = {
    0,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    5,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    0,
    13,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    16,
    17,
    18,
    18,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    21,
    21,
    22,
    22,
    22,
    22,
    22,
    22,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24
};

__device__ __constant__ int dual_ur5e_flattened_joint_to_spheres[175] = {
    0,
    75,
    -1,
    1,
    -1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    -1,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    -1,
    17,
    -1,
    18,
    -1,
    19,
    20,
    -1,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    -1,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    -1,
    42,
    43,
    44,
    45,
    46,
    47,
    -1,
    48,
    49,
    50,
    51,
    52,
    53,
    -1,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    -1,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    -1,
    76,
    -1,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    -1,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    -1,
    92,
    -1,
    93,
    -1,
    94,
    95,
    -1,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    -1,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    -1,
    117,
    118,
    119,
    120,
    121,
    122,
    -1,
    123,
    124,
    125,
    126,
    127,
    128,
    -1,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    -1,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    -1
};

__device__ __constant__ int dual_ur5e_joint_types[] = {
    3,
    5,
    5,
    5,
    5,
    5,
    5,
    3,
    3,
    3,
    3,
    3,
    3,
    5,
    5,
    5,
    5,
    5,
    5,
    3,
    3,
    3,
    3,
    3,
    3
};

__device__ __constant__ int dual_ur5e_self_cc_ranges[95][3] = {
    { 0, 1, 74 },
    { 0, 76, 149 },
    { 1, 9, 149 },
    { 2, 17, 149 },
    { 3, 17, 149 },
    { 4, 17, 149 },
    { 5, 17, 149 },
    { 6, 17, 149 },
    { 7, 17, 149 },
    { 8, 17, 149 },
    { 9, 20, 149 },
    { 10, 20, 149 },
    { 11, 20, 149 },
    { 12, 20, 149 },
    { 13, 20, 149 },
    { 14, 20, 149 },
    { 15, 20, 149 },
    { 16, 20, 149 },
    { 17, 21, 149 },
    { 18, 21, 149 },
    { 19, 21, 149 },
    { 20, 75, 149 },
    { 21, 75, 149 },
    { 22, 75, 149 },
    { 23, 75, 149 },
    { 24, 75, 149 },
    { 25, 75, 149 },
    { 26, 75, 149 },
    { 27, 75, 149 },
    { 28, 75, 149 },
    { 29, 75, 149 },
    { 30, 75, 149 },
    { 31, 75, 149 },
    { 32, 75, 149 },
    { 33, 75, 149 },
    { 34, 75, 149 },
    { 35, 75, 149 },
    { 36, 75, 149 },
    { 37, 75, 149 },
    { 38, 75, 149 },
    { 39, 75, 149 },
    { 40, 75, 149 },
    { 41, 75, 149 },
    { 42, 75, 149 },
    { 43, 75, 149 },
    { 44, 75, 149 },
    { 45, 75, 149 },
    { 46, 75, 149 },
    { 47, 75, 149 },
    { 48, 75, 149 },
    { 49, 75, 149 },
    { 50, 75, 149 },
    { 51, 75, 149 },
    { 52, 75, 149 },
    { 53, 75, 149 },
    { 54, 75, 149 },
    { 55, 75, 149 },
    { 56, 75, 149 },
    { 57, 75, 149 },
    { 58, 75, 149 },
    { 59, 75, 149 },
    { 60, 75, 149 },
    { 61, 75, 149 },
    { 62, 75, 149 },
    { 63, 75, 149 },
    { 64, 75, 149 },
    { 65, 75, 149 },
    { 66, 75, 149 },
    { 67, 75, 149 },
    { 68, 75, 149 },
    { 69, 75, 149 },
    { 70, 75, 149 },
    { 71, 75, 149 },
    { 72, 75, 149 },
    { 73, 75, 149 },
    { 74, 75, 149 },
    { 75, 76, 149 },
    { 76, 84, 149 },
    { 77, 92, 149 },
    { 78, 92, 149 },
    { 79, 92, 149 },
    { 80, 92, 149 },
    { 81, 92, 149 },
    { 82, 92, 149 },
    { 83, 92, 149 },
    { 84, 95, 149 },
    { 85, 95, 149 },
    { 86, 95, 149 },
    { 87, 95, 149 },
    { 88, 95, 149 },
    { 89, 95, 149 },
    { 90, 95, 149 },
    { 91, 95, 149 },
    { 92, 96, 149 },
    { 93, 96, 149 }
};

__device__ __constant__ int dual_ur5e_joint_parents[25] = {
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    6,
    6,
    6,
    11,
    0,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    18,
    18,
    18,
    23
};

__device__ __constant__ int dual_ur5e_T_memory_idx[25] = {
    0,
    3,
    3,
    3,
    3,
    3,
    1,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    3,
    3,
    3,
    3,
    3,
    3
};

__device__ __constant__ int dual_ur5e_dfs_order[25] = {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24
};


template <>
__device__ void fk<ppln::robots::Dual_UR5e>(
    const float* q,
    volatile float* sphere_pos, // 150 spheres x 16 robots x 3 coordinates
    float *T, // 32 robots x 4 x 4x4 transform matrix
    const int tid
)
{
    // every 4 threads are responsible for one column of the transform matrix T
    // make_transform will calculate the necessary column of T_step needed for the thread
    const int col_ind = tid % 4;
    const int batch_ind = tid / 4;

    int T_offset = batch_ind * 5 * 16;
    float T_step_col[4]; // 4x1 column of the joint transform matrix for this thread
    float *T_base = T + T_offset; // 4x4 transform matrix for the batch

    #pragma unroll
    for (int i = 0; i < 5; ++i) {
        float *T_col_i = T + i * 16 + col_ind * 4;
        for (int r=0; r<4; r++) {
            T_col_i[r] = 0.0f;
        }
        T_col_i[col_ind] = 1.0f;
    }

    int joint_to_sphere_ind = 0;

    // loop through each joint, accumulate transformation matrix, and update sphere positions
    for (int j = 0; j < DUAL_UR5E_JOINT_COUNT; ++j) {
        int i = dual_ur5e_dfs_order[j];
        float T_col_tmp[4];
        int parent_idx = dual_ur5e_joint_parents[i];
        int T_memory_idx_parent = dual_ur5e_T_memory_idx[parent_idx];
        int T_memory_idx = dual_ur5e_T_memory_idx[i];
        if (i > 0) {
            int ft_addr_start = i * 16;
            int joint_type = dual_ur5e_joint_types[i];
            if (joint_type <= Z_PRISM) {
                prism_fn(&dual_ur5e_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col, joint_type);
            }
            else if (joint_type == X_ROT) {
                xrot_fn(&dual_ur5e_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col);
            }
            else if (joint_type == Y_ROT) { 
                yrot_fn(&dual_ur5e_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col);
            }
            else if (joint_type == Z_ROT) {
                zrot_fn(&dual_ur5e_fixed_transforms[ft_addr_start], q[i - 1], col_ind, T_step_col);
            }
            for (int r=0; r<4; r++){
                T_col_tmp[r] = dot4_col(&T_base[T_memory_idx_parent*16 + r], T_step_col);
            }
            for (int r=0; r<4; r++){
                T_base[T_memory_idx*16 + col_ind*4 + r] = T_col_tmp[r];
            }
        }
        __syncwarp();

        while (dual_ur5e_flattened_joint_to_spheres[joint_to_sphere_ind] != -1) {
            int sphere_ind = dual_ur5e_flattened_joint_to_spheres[joint_to_sphere_ind];
            if (col_ind < 3) {
                // sphere sphere_ind, robot batch_ind (32 robots), coord col_ind
                sphere_pos[sphere_ind * BATCH_SIZE * 3 + batch_ind * 3 + col_ind] = 
                    T_base[col_ind] * dual_ur5e_spheres_array[sphere_ind].x +
                    T_base[col_ind + M] * dual_ur5e_spheres_array[sphere_ind].y +
                    T_base[col_ind + M*2] * dual_ur5e_spheres_array[sphere_ind].z +
                    T_base[col_ind + M*3];
            }
            joint_to_sphere_ind++;
        }
        joint_to_sphere_ind++;
    }
}

// 4 threads per discretized motion for self-collision check
template <>
__device__ bool self_collision_check<ppln::robots::Dual_UR5e>(volatile float* sphere_pos, volatile int* joint_in_collision, const int tid){
    const int thread_ind = tid % 4;
    const int batch_ind = tid / 4;
    bool has_collision = false;

    for (int i = thread_ind; i < DUAL_UR5E_SELF_CC_RANGE_COUNT; i += 4) {
        if (warp_any_active_mask(has_collision)) return false;
        int sphere_1_ind = dual_ur5e_self_cc_ranges[i][0];
        if (joint_in_collision[20*batch_ind + dual_ur5e_sphere_to_joint[sphere_1_ind]] == 0) continue;
        float sphere_1[3] = {
            sphere_pos[sphere_1_ind * BATCH_SIZE * 3 + batch_ind * 3 + 0],
            sphere_pos[sphere_1_ind * BATCH_SIZE * 3 + batch_ind * 3 + 1],
            sphere_pos[sphere_1_ind * BATCH_SIZE * 3 + batch_ind * 3 + 2]
        };
        for (int j = dual_ur5e_self_cc_ranges[i][1]; j <= dual_ur5e_self_cc_ranges[i][2]; j++) {
            float sphere_2[3] = {
                sphere_pos[j * BATCH_SIZE * 3 + batch_ind * 3 + 0],
                sphere_pos[j * BATCH_SIZE * 3 + batch_ind * 3 + 1],
                sphere_pos[j * BATCH_SIZE * 3 + batch_ind * 3 + 2]
            };
            if (sphere_sphere_self_collision(
                sphere_1[0], sphere_1[1], sphere_1[2], dual_ur5e_spheres_array[sphere_1_ind].w,
                sphere_2[0], sphere_2[1], sphere_2[2], dual_ur5e_spheres_array[j].w
            )){
                //return false;
                has_collision=true;
            }
        }
    }
    return !has_collision;

}

// 4 threads per discretized motion for env collision check
template <>
__device__ bool env_collision_check<ppln::robots::Dual_UR5e>(volatile float* sphere_pos, volatile int* joint_in_collision, ppln::collision::Environment<float> *env, const int tid){
    const int thread_ind = tid % 4;
    const int batch_ind = tid / 4;
    bool has_collision=false;

    for (int i = DUAL_UR5E_SPHERE_COUNT-1-thread_ind; i >=DUAL_UR5E_SPHERE_COUNT%4; i -= 4){
        // sphere i, robot batch_ind (32 robots)
        if (joint_in_collision[20*batch_ind + dual_ur5e_sphere_to_joint[i]] > 0 && 
            sphere_environment_in_collision(
                env,
                sphere_pos[i * BATCH_SIZE * 3 + batch_ind * 3 + 0],
                sphere_pos[i * BATCH_SIZE * 3 + batch_ind * 3 + 1],
                sphere_pos[i * BATCH_SIZE * 3 + batch_ind * 3 + 2],
                dual_ur5e_spheres_array[i].w
            )
        ) {
            has_collision=true;
            //return false;
        } 
        if (warp_any_full_mask(has_collision)) return false;
    }

    int i=thread_ind;
    if (joint_in_collision[20*batch_ind + dual_ur5e_sphere_to_joint[i]] > 0 && 
        sphere_environment_in_collision(
            env,
            sphere_pos[i * BATCH_SIZE * 3 + batch_ind * 3 + 0],
            sphere_pos[i * BATCH_SIZE * 3 + batch_ind * 3 + 1],
            sphere_pos[i * BATCH_SIZE * 3 + batch_ind * 3 + 2],
            dual_ur5e_spheres_array[i].w
        )
    ) {
        has_collision=true;
        //return false;
    } 

    return !has_collision;
}
}
